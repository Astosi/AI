
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

(X_train, y_train), (X_test, y_test) = mnist.load_data()

X_train = X_train.reshape((X_train.shape[0], 28, 28, 1)).astype('float32')
X_test = X_test.reshape((X_test.shape[0], 28, 28, 1)).astype('float32')

X_train = tf.keras.utils.normalize(X_train, axis=1)
X_test = tf.keras.utils.normalize(X_test, axis=1)

y_train = np_utils.to_categorical(y_train)
y_test = np_utils.to_categorical(y_test)
num_classes = y_test.shape[1]

def larger_model():
    
    model = Sequential() 
    model.add(Conv2D(1, (3, 3), input_shape=(28, 28, 1), activation='relu')) 
    model.add(MaxPooling2D()) 
    model.add(Dropout(0.2)) 
    model.add(Flatten()) 
    model.add(Dense(128, activation='relu')) 
    model.add(Dense(50, activation='relu')) 
    model.add(Dense(num_classes, activation='softmax')) 

	model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
	return model

model = larger_model()

model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=1, batch_size=200)



scores = model.evaluate(X_test, y_test, verbose=0)
print(" CNN Error: %.2f%%" % (100-scores[1]*100))

# We can easily save the model by 
model.save('cnn.model')

# Load our model 
new_model = tf.keras.models.load_model('cnn.model') 
predictions = new_model.predict(X_test) 

# Letâ€™s check! 
plt.imshow(X_test[0],cmap=plt.cm.binary) 
plt.show()  



#And get prediction[0], which is prediction of X_test[0] 
print(np.argmax(predictions[0])) 






